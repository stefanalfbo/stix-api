using System.Text.Json;
using NSubstitute;
using Shouldly;
using StixApi.Contracts.Persistance;
using StixApi.Domain.Entities;
using StixApi.Features.Vulnerabilities.Queries.Get.V1;
using StixApi.Persistance.Models;

namespace StixApi.UnitTests.Vulnerabilities.Queries;

public class GetVulnerabilityQueryHandlerTests
{
    [Fact]
    public async Task GetVulnerabilityTest()
    {
        // Arrange
        var repositoryMock = Substitute.For<IAsyncRepository<VulnerabilityDbModel>>();
        var vulnerability = new VulnerabilityDbModel
        {
            Id = "vulnerability--e9eb06c9-ebc1-47a6-a009-4702bd9f744a",
            Value = JsonSerializer.SerializeToDocument(new Vulnerability(
                    "vulnerability",
                    "2.1",
                    "vulnerability--e9eb06c9-ebc1-47a6-a009-4702bd9f744a",
                    DateTime.UtcNow,
                    DateTime.UtcNow,
                    "CVE-2018-0798",
                    "identity--eb8aacf7-6148-4cd6-97f9-fda0c83622d7",
                    null, null, 100, null, null, ["marking-definition--34098fce-860f-48ae-8e50-ebd3cc5e41da"], null, "Equation Editor in Microsoft Office 2007, Microsoft Office 2010, Microsoft Office 2013, and Microsoft Office 2016 allows a remote code execution vulnerability due to the way objects are handled in memory, aka Microsoft Office Memory Corruption Vulnerability.")
                )
        };
        repositoryMock.GetByIdAsync(Arg.Is<string>("vulnerability--e9eb06c9-ebc1-47a6-a009-4702bd9f744a")).Returns(vulnerability);
        var handler = new GetVulnerabilityQueryHandler(repositoryMock);

        // Act
        var result = await handler.Handle(new GetVulnerabilityQuery { Id = "vulnerability--e9eb06c9-ebc1-47a6-a009-4702bd9f744a" }, CancellationToken.None);

        // Assert
        result.ShouldBeOfType<VulnerabilityDetailDTO>();
        result.Name.ShouldBe("CVE-2018-0798");
    }
}
