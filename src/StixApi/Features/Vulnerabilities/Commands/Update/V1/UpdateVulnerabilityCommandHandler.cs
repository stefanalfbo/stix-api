using AutoMapper;
using MediatR;
using StixApi.Contracts.Persistance;
using StixApi.Domain.Entities;
using StixApi.Exceptions;
using StixApi.Features.Vulnerabilities.Commands.Create.V1;
using StixApi.Persistance.Models;

namespace StixApi.Features.Vulnerabilities.Commands.Update.V1;

public class UpdateVulnerabilityCommandHandler : IRequestHandler<UpdateVulnerabilityCommand>
{
    private readonly IAsyncRepository<VulnerabilityDbModel> _vulnerabilityRepository;
    private readonly IMapper _mapper;

    public UpdateVulnerabilityCommandHandler(IMapper mapper, IAsyncRepository<VulnerabilityDbModel> vulnerabilityRepository)
    {
        _mapper = mapper;
        _vulnerabilityRepository = vulnerabilityRepository;
    }

    public async Task Handle(UpdateVulnerabilityCommand request, CancellationToken cancellationToken)
    {
        var validator = new UpdateVulnerabilityCommandValidator();
        var validationResult = await validator.ValidateAsync(request, cancellationToken);
        if (!validationResult.IsValid)
        {
            throw new ValidationException(validationResult);
        }

        var vulnerability = await _vulnerabilityRepository.GetByIdAsync(request.Id);

        if (vulnerability == null)
        {
            // todo: throw exception
            return;
        }

        // TODO: Set modified date and use the domain entity Vulnerability as model
        // for storing in the database
        // var v = _mapper.Map<Vulnerability>(vulnerability);
        // v.Modified = DateTime.UtcNow.ToString();

        _mapper.Map(request, vulnerability, typeof(VulnerabilityDbModel), typeof(Vulnerability));

        await _vulnerabilityRepository.UpdateAsync(vulnerability);
    }
}