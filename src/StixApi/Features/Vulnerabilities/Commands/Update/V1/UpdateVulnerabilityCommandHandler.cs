using System.Text.Json;
using MediatR;
using StixApi.Contracts.Persistance;
using StixApi.Domain.Entities;
using StixApi.Exceptions;
using StixApi.Persistance.Models;

namespace StixApi.Features.Vulnerabilities.Commands.Update.V1;

public class UpdateVulnerabilityCommandHandler : IRequestHandler<UpdateVulnerabilityCommand>
{
    private readonly IAsyncRepository<VulnerabilityDbModel> _vulnerabilityRepository;

    public UpdateVulnerabilityCommandHandler(IAsyncRepository<VulnerabilityDbModel> vulnerabilityRepository)
    {
        _vulnerabilityRepository = vulnerabilityRepository;
    }

    public async Task Handle(UpdateVulnerabilityCommand request, CancellationToken cancellationToken)
    {
        var validator = new UpdateVulnerabilityCommandValidator();
        var validationResult = await validator.ValidateAsync(request, cancellationToken);
        if (!validationResult.IsValid)
        {
            throw new ValidationException(validationResult);
        }

        var vulnerabilityDbModel = await _vulnerabilityRepository.GetByIdAsync(request.Id);

        if (vulnerabilityDbModel == null)
        {
            throw new NotFoundException($"Vulnerability with ID {request.Id} not found.");
        }

        var vulnerability = JsonSerializer.Deserialize<Vulnerability>(vulnerabilityDbModel.Value)
            ?? throw new JsonException("Failed to deserialize Vulnerability from JSON.");

        var updatedVulnerability = vulnerability with
        {
            Description = request.Description,
            Revoked = request.Revoked,
            Confidence = request.Confidence,
            Modified = DateTime.UtcNow
        };

        vulnerabilityDbModel.Value = JsonSerializer.SerializeToDocument(updatedVulnerability);

        await _vulnerabilityRepository.UpdateAsync(vulnerabilityDbModel);
    }
}