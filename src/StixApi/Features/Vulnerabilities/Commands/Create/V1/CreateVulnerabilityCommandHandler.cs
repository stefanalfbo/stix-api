using AutoMapper;
using MediatR;
using StixApi.Contracts.Persistance;
using StixApi.Exceptions;
using StixApi.Persistance.Models;

namespace StixApi.Features.Vulnerabilities.Commands.Create.V1;

public class CreateVulnerabilityCommandHandler : IRequestHandler<CreateVulnerabilityCommand, string>
{
    private readonly IAsyncRepository<VulnerabilityDbModel> _vulnerabilityRepository;
    private readonly IMapper _mapper;

    public CreateVulnerabilityCommandHandler(IMapper mapper, IAsyncRepository<VulnerabilityDbModel> vulnerabilityRepository)
    {
        _mapper = mapper;
        _vulnerabilityRepository = vulnerabilityRepository;
    }

    public async Task<string> Handle(CreateVulnerabilityCommand request, CancellationToken cancellationToken)
    {
        var validator = new CreateVulnerabilityCommandValidator();
        var validationResult = await validator.ValidateAsync(request, cancellationToken);
        if (!validationResult.IsValid)
        {
            throw new ValidationException(validationResult);
        }

        var vulnerability = _mapper.Map<VulnerabilityDbModel>(request);

        await _vulnerabilityRepository.AddAsync(vulnerability);
        return vulnerability.Id;
    }
}