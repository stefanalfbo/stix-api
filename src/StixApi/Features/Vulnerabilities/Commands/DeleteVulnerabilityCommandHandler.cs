using AutoMapper;
using MediatR;
using StixApi.Contracts.Persistance;
using StixApi.Persistance.Models;

namespace StixApi.Features.Vulnerabilities.Commands;

public class DeleteVulnerabilityCommandHandler : IRequestHandler<DeleteVulnerabilityCommand>
{
    private readonly IAsyncRepository<VulnerabilityDbModel> _vulnerabilityRepository;
    private readonly IMapper _mapper;

    public DeleteVulnerabilityCommandHandler(IMapper mapper, IAsyncRepository<VulnerabilityDbModel> vulnerabilityRepository)
    {
        _mapper = mapper;
        _vulnerabilityRepository = vulnerabilityRepository;
    }

    public async Task Handle(DeleteVulnerabilityCommand request, CancellationToken cancellationToken)
    {
        var vulnerability = await _vulnerabilityRepository.GetByIdAsync(request.Id);

        if (vulnerability == null)
        {
            return;
        }

        await _vulnerabilityRepository.DeleteAsync(vulnerability);
    }
}