using FluentValidation;

namespace StixApi.Features.Vulnerabilities.Commands;

public class CreateVulnerabilityCommandValidator : AbstractValidator<CreateVulnerabilityCommand>
{
    public CreateVulnerabilityCommandValidator()
    {
        RuleFor(v => v.Type)
            .NotEmpty().WithMessage("type is required")
            .Equal("vulnerability")
            .WithMessage("Type must be 'vulnerability'");

        RuleFor(v => v.SpecificationVersion)
            .NotEmpty().WithMessage("spec_version is required")
            .Must(v => v == "2.0" || v == "2.1")
            .WithMessage("spec_version must be either '2.0' or '2.1'");

        RuleFor(v => v.Id)
            .NotEmpty().WithMessage("id is required")
            .Matches(@"^vulnerability--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$")
            .WithMessage("Id must follow the pattern: vulnerability--GUID");

        RuleFor(v => v.Created)
            .NotEmpty().WithMessage("created is required")
            .Matches(@"^[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\\.[0-9]+)?Z$")
            .WithMessage("created must be in RFC3339 format")
            .Must(dateString => DateTimeOffset.TryParse(dateString, out _))
            .WithMessage("created must be a valid RFC3339 timestamp");
    }
}