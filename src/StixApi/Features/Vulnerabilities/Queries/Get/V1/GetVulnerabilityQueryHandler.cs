using AutoMapper;
using MediatR;
using StixApi.Contracts.Persistance;
using StixApi.Exceptions;
using StixApi.Persistance.Models;

namespace StixApi.Features.Vulnerabilities.Queries.Get.V1;

public class GetVulnerabilityQueryHandler : IRequestHandler<GetVulnerabilityQuery, VulnerabilityDetailDTO>
{
    private readonly IAsyncRepository<VulnerabilityDbModel> _vulnerabilityRepository;
    private readonly IMapper _mapper;

    public GetVulnerabilityQueryHandler(IMapper mapper, IAsyncRepository<VulnerabilityDbModel> vulnerabilityRepository)
    {
        _vulnerabilityRepository = vulnerabilityRepository;
        _mapper = mapper;
    }

    public async Task<VulnerabilityDetailDTO> Handle(GetVulnerabilityQuery request, CancellationToken cancellationToken)
    {
        var validator = new GetVulnerabilityQueryValidator();
        var validationResult = await validator.ValidateAsync(request, cancellationToken);
        if (!validationResult.IsValid)
        {
            throw new ValidationException(validationResult);
        }

        var vulnerability = await _vulnerabilityRepository.GetByIdAsync(request.Id);

        return _mapper.Map<VulnerabilityDetailDTO>(vulnerability);
    }
}