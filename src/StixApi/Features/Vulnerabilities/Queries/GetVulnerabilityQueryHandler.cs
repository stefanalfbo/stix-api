using AutoMapper;
using MediatR;
using StixApi.Contracts.Persistance;
using StixApi.Features.Vulnerabilities.Queries.Models;
using StixApi.Persistance.Models;

namespace StixApi.Features.Vulnerabilities.Queries;

public class GetVulnerabilityQueryHandler : IRequestHandler<GetVulnerabilityQuery, VulnerabilityDTO>
{
    private readonly IAsyncRepository<VulnerabilityDbModel> _vulnerabilityRepository;
    private readonly IMapper _mapper;

    public GetVulnerabilityQueryHandler(IMapper mapper, IAsyncRepository<VulnerabilityDbModel> vulnerabilityRepository)
    {
        _vulnerabilityRepository = vulnerabilityRepository;
        _mapper = mapper;
    }

    public async Task<VulnerabilityDTO> Handle(GetVulnerabilityQuery request, CancellationToken cancellationToken)
    {
        var vulnerability = await _vulnerabilityRepository.GetByIdAsync(request.Id);

        return _mapper.Map<VulnerabilityDTO>(vulnerability);
    }
}